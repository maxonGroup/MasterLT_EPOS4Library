/**
 * @file EPOS4Class.hpp
 * @authors Harrison Harding, Carlos Bacigalupo, Mihir Joshi, maxon motor Australia
 * @brief Command library to operate the EPOS4 via CAN
 * @version 0.11.0
 * @date 2024-03-21
 * 
 * @copyright Copyright (c) 2022 - 2024
 * 
 */

/**Changelog V0.10.0
 * Seperated out ESP-IDF specific functions to allow use on other platforms.
 * 
 * Added:
 * SetErrorFunction, SetInfoFunction, SetDebugFunction for assigning logging functions
 * SetGetTimeFunction, SetWaitFunction for assigning system time functions
 * SetCanTxFunction for assigning a CAN frame transmission function
 * 
 * Removed:
 * CAN driver setup function, Moved to ESP32 Helper files.
 * 
 * Minor Changes:
 * Time since last heartbeat now measured in milliseconds instead of FreeRTOS ticks (msSinceHeartbeat())
 * 
 */

#pragma once

#include <stdbool.h>
#include <map>
#include <vector>
#include <stdio.h>
#include <string>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

//#define wait(t) vTaskDelay(t / portTICK_PERIOD_MS);
const int SDO_TIMOUT_MS = 100; //100 milliseconds

#ifdef CONFIG_IDF_TARGET_ESP32S3 //if gen 2 (gen2 uses ESP32S3)
    #define CAN_TX_PIN GPIO_NUM_36
    #define CAN_RX_PIN GPIO_NUM_37
#else
    #define CAN_TX_PIN GPIO_NUM_21
    #define CAN_RX_PIN GPIO_NUM_22
#endif

/*//////////////////////////////////////////////////////////////////
Data structures
*////////////////////////////////////////////////////////////////////


/********************************************************************************
 * @ingroup odEnum
 * @brief Index, Subindex, and Length of each EPOS4 object dictionary entry.
********************************************************************************/
typedef enum EPOS_OD {
    EPOS_OD_INVALID_ENTRY = 0,
    EPOS_OD_DEVICE_TYPE = 0x4001000,
    EPOS_OD_ERROR_REGISTER = 0x1001001,
     EPOS_OD_ERROR_HISTORY_NUMBER_OF_ERRORS = 0x1001003,
     EPOS_OD_ERROR_HISTORY_ERROR_HISTORY_1 = 0x4011003,
     EPOS_OD_ERROR_HISTORY_ERROR_HISTORY_2 = 0x4021003,
     EPOS_OD_ERROR_HISTORY_ERROR_HISTORY_3 = 0x4031003,
     EPOS_OD_ERROR_HISTORY_ERROR_HISTORY_4 = 0x4041003,
     EPOS_OD_ERROR_HISTORY_ERROR_HISTORY_5 = 0x4051003,
    EPOS_OD_COB_ID_SYNC = 0x4001005,
     EPOS_OD_STORE_PARAMETERS_SAVE_ALL_PARAMETERS = 0x4011010,
     EPOS_OD_RESTORE_DEFAULT_PARAMETERS_RESTORE_ALL_DEFAULT_PARAMETERS = 0x4011011,
     EPOS_OD_RESTORE_DEFAULT_PARAMETERS_INTERNAL_RESTORE_FACTORY_DEFAULT_PARAMETERS = 0x4041011,
    EPOS_OD_COB_ID_EMCY = 0x4001014,
     EPOS_OD_CONSUMER_HEARTBEAT_TIME_CONSUMER_1_HEARTBEAT_TIME = 0x4011016,
     EPOS_OD_CONSUMER_HEARTBEAT_TIME_CONSUMER_2_HEARTBEAT_TIME = 0x4021016,
    EPOS_OD_PRODUCER_HEARTBEAT_TIME = 0x2001017,
     EPOS_OD_IDENTITY_OBJECT_VENDOR_ID = 0x4011018,
     EPOS_OD_IDENTITY_OBJECT_PRODUCT_CODE = 0x4021018,
     EPOS_OD_IDENTITY_OBJECT_REVISION_NUMBER = 0x4031018,
     EPOS_OD_IDENTITY_OBJECT_SERIAL_NUMBER = 0x4041018,
     //EPOS_OD_SDO_SERVER_PARAMETER_COB_ID_SDO_CLIENT_TO_SERVER = 0x4011200, //we must know otherwise we couldnt read the value!
     //EPOS_OD_SDO_SERVER_PARAMETER_COB_ID_SDO_SERVER_TO_CLIENT = 0x4021200,
     //EPOS_OD_RECEIVE_PDO_1_PARAMETER_COB_ID_USED_BY_RXPDO_1 = 0x4011400,
     EPOS_OD_RECEIVE_PDO_1_PARAMETER_TRANSMISSION_TYPE_RXPDO_1 = 0x1021400,
     //EPOS_OD_RECEIVE_PDO_2_PARAMETER_COB_ID_USED_BY_RXPDO_2 = 0x4011401,
     EPOS_OD_RECEIVE_PDO_2_PARAMETER_TRANSMISSION_TYPE_RXPDO_2 = 0x1021401,
     //EPOS_OD_RECEIVE_PDO_3_PARAMETER_COB_ID_USED_BY_RXPDO_3 = 0x4011402,
     EPOS_OD_RECEIVE_PDO_3_PARAMETER_TRANSMISSION_TYPE_RXPDO_3 = 0x1021402,
     //EPOS_OD_RECEIVE_PDO_4_PARAMETER_COB_ID_USED_BY_RXPDO_4 = 0x4011403,
     EPOS_OD_RECEIVE_PDO_4_PARAMETER_TRANSMISSION_TYPE_RXPDO_4 = 0x1021403,
     EPOS_OD_RECEIVE_PDO_1_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_RXPDO_1 = 0x1001600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_1ST_MAPPED_OBJECT_IN_RXPDO_1 = 0x4011600, //MAPPINGS SHOULD ONLY BE ACCESSED BY MEMBER FUNCTIONS
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_2ND_MAPPED_OBJECT_IN_RXPDO_1 = 0x4021600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_3RD_MAPPED_OBJECT_IN_RXPDO_1 = 0x4031600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_4TH_MAPPED_OBJECT_IN_RXPDO_1 = 0x4041600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_5TH_MAPPED_OBJECT_IN_RXPDO_1 = 0x4051600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_6TH_MAPPED_OBJECT_IN_RXPDO_1 = 0x4061600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_7TH_MAPPED_OBJECT_IN_RXPDO_1 = 0x4071600,
     //EPOS_OD_RECEIVE_PDO_1_MAPPING_8TH_MAPPED_OBJECT_IN_RXPDO_1 = 0x4081600,
     EPOS_OD_RECEIVE_PDO_2_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_RXPDO_2 = 0x1001601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_1ST_MAPPED_OBJECT_IN_RXPDO_2 = 0x4011601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_2ND_MAPPED_OBJECT_IN_RXPDO_2 = 0x4021601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_3RD_MAPPED_OBJECT_IN_RXPDO_2 = 0x4031601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_4TH_MAPPED_OBJECT_IN_RXPDO_2 = 0x4041601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_5TH_MAPPED_OBJECT_IN_RXPDO_2 = 0x4051601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_6TH_MAPPED_OBJECT_IN_RXPDO_2 = 0x4061601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_7TH_MAPPED_OBJECT_IN_RXPDO_2 = 0x4071601,
     //EPOS_OD_RECEIVE_PDO_2_MAPPING_8TH_MAPPED_OBJECT_IN_RXPDO_2 = 0x4081601,
     EPOS_OD_RECEIVE_PDO_3_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_RXPDO_3 = 0x1001602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_1ST_MAPPED_OBJECT_IN_RXPDO_3 = 0x4011602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_2ND_MAPPED_OBJECT_IN_RXPDO_3 = 0x4021602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_3RD_MAPPED_OBJECT_IN_RXPDO_3 = 0x4031602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_4TH_MAPPED_OBJECT_IN_RXPDO_3 = 0x4041602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_5TH_MAPPED_OBJECT_IN_RXPDO_3 = 0x4051602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_6TH_MAPPED_OBJECT_IN_RXPDO_3 = 0x4061602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_7TH_MAPPED_OBJECT_IN_RXPDO_3 = 0x4071602,
     //EPOS_OD_RECEIVE_PDO_3_MAPPING_8TH_MAPPED_OBJECT_IN_RXPDO_3 = 0x4081602,
     EPOS_OD_RECEIVE_PDO_4_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_RXPDO_4 = 0x1001603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_1ST_MAPPED_OBJECT_IN_RXPDO_4 = 0x4011603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_2ND_MAPPED_OBJECT_IN_RXPDO_4 = 0x4021603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_3RD_MAPPED_OBJECT_IN_RXPDO_4 = 0x4031603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_4TH_MAPPED_OBJECT_IN_RXPDO_4 = 0x4041603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_5TH_MAPPED_OBJECT_IN_RXPDO_4 = 0x4051603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_6TH_MAPPED_OBJECT_IN_RXPDO_4 = 0x4061603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_7TH_MAPPED_OBJECT_IN_RXPDO_4 = 0x4071603,
     //EPOS_OD_RECEIVE_PDO_4_MAPPING_8TH_MAPPED_OBJECT_IN_RXPDO_4 = 0x4081603,
     //EPOS_OD_TRANSMIT_PDO_1_PARAMETER_COB_ID_USED_BY_TXPDO_1 = 0x4011800,
     EPOS_OD_TRANSMIT_PDO_1_PARAMETER_TRANSMISSION_TYPE_TXPDO_1 = 0x1021800,
     EPOS_OD_TRANSMIT_PDO_1_PARAMETER_INHIBIT_TIME_TXPDO_1 = 0x2031800,
     //EPOS_OD_TRANSMIT_PDO_2_PARAMETER_COB_ID_USED_BY_TXPDO_2 = 0x4011801,
     EPOS_OD_TRANSMIT_PDO_2_PARAMETER_TRANSMISSION_TYPE_TXPDO_2 = 0x1021801,
     EPOS_OD_TRANSMIT_PDO_2_PARAMETER_INHIBIT_TIME_TXPDO_2 = 0x2031801,
     //EPOS_OD_TRANSMIT_PDO_3_PARAMETER_COB_ID_USED_BY_TXPDO_3 = 0x4011802,
     EPOS_OD_TRANSMIT_PDO_3_PARAMETER_TRANSMISSION_TYPE_TXPDO_3 = 0x1021802,
     EPOS_OD_TRANSMIT_PDO_3_PARAMETER_INHIBIT_TIME_TXPDO_3 = 0x2031802,
     //EPOS_OD_TRANSMIT_PDO_4_PARAMETER_COB_ID_USED_BY_TXPDO_4 = 0x4011803,
     EPOS_OD_TRANSMIT_PDO_4_PARAMETER_TRANSMISSION_TYPE_TXPDO_4 = 0x1021803,
     EPOS_OD_TRANSMIT_PDO_4_PARAMETER_INHIBIT_TIME_TXPDO_4 = 0x2031803,
     EPOS_OD_TRANSMIT_PDO_1_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_TXPDO_1 = 0x1001A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_1ST_MAPPED_OBJECT_IN_TXPDO_1 = 0x4011A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_2ND_MAPPED_OBJECT_IN_TXPDO_1 = 0x4021A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_3RD_MAPPED_OBJECT_IN_TXPDO_1 = 0x4031A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_4TH_MAPPED_OBJECT_IN_TXPDO_1 = 0x4041A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_5TH_MAPPED_OBJECT_IN_TXPDO_1 = 0x4051A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_6TH_MAPPED_OBJECT_IN_TXPDO_1 = 0x4061A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_7TH_MAPPED_OBJECT_IN_TXPDO_1 = 0x4071A00,
     //EPOS_OD_TRANSMIT_PDO_1_MAPPING_8TH_MAPPED_OBJECT_IN_TXPDO_1 = 0x4081A00,
     EPOS_OD_TRANSMIT_PDO_2_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_TXPDO_2 = 0x1001A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_1ST_MAPPED_OBJECT_IN_TXPDO_2 = 0x4011A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_2ND_MAPPED_OBJECT_IN_TXPDO_2 = 0x4021A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_3RD_MAPPED_OBJECT_IN_TXPDO_2 = 0x4031A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_4TH_MAPPED_OBJECT_IN_TXPDO_2 = 0x4041A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_5TH_MAPPED_OBJECT_IN_TXPDO_2 = 0x4051A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_6TH_MAPPED_OBJECT_IN_TXPDO_2 = 0x4061A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_7TH_MAPPED_OBJECT_IN_TXPDO_2 = 0x4071A01,
     //EPOS_OD_TRANSMIT_PDO_2_MAPPING_8TH_MAPPED_OBJECT_IN_TXPDO_2 = 0x4081A01,
     EPOS_OD_TRANSMIT_PDO_3_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_TXPDO_3 = 0x1001A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_1ST_MAPPED_OBJECT_IN_TXPDO_3 = 0x4011A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_2ND_MAPPED_OBJECT_IN_TXPDO_3 = 0x4021A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_3RD_MAPPED_OBJECT_IN_TXPDO_3 = 0x4031A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_4TH_MAPPED_OBJECT_IN_TXPDO_3 = 0x4041A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_5TH_MAPPED_OBJECT_IN_TXPDO_3 = 0x4051A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_6TH_MAPPED_OBJECT_IN_TXPDO_3 = 0x4061A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_7TH_MAPPED_OBJECT_IN_TXPDO_3 = 0x4071A02,
     //EPOS_OD_TRANSMIT_PDO_3_MAPPING_8TH_MAPPED_OBJECT_IN_TXPDO_3 = 0x4081A02,
     EPOS_OD_TRANSMIT_PDO_4_MAPPING_NUMBER_OF_MAPPED_OBJECTS_IN_TXPDO_4 = 0x1001A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_1ST_MAPPED_OBJECT_IN_TXPDO_4 = 0x4011A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_2ND_MAPPED_OBJECT_IN_TXPDO_4 = 0x4021A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_3RD_MAPPED_OBJECT_IN_TXPDO_4 = 0x4031A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_4TH_MAPPED_OBJECT_IN_TXPDO_4 = 0x4041A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_5TH_MAPPED_OBJECT_IN_TXPDO_4 = 0x4051A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_6TH_MAPPED_OBJECT_IN_TXPDO_4 = 0x4061A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_7TH_MAPPED_OBJECT_IN_TXPDO_4 = 0x4071A03,
     //EPOS_OD_TRANSMIT_PDO_4_MAPPING_8TH_MAPPED_OBJECT_IN_TXPDO_4 = 0x4081A03,
    // EPOS_OD_PROGRAM_CONTROL_PROGRAM_NUMBER_1 = 0x1011F51,
    // EPOS_OD_PROGRAM_SOFTWARE_IDENTIFICATION_PROGRAM_NUMBER_1 = 0x4011F56,
    // EPOS_OD_FLASH_STATUS_IDENTIFICATION_PROGRAM_NUMBER_1 = 0x4011F57,
    //EPOS_OD_NODE_ID = 0x1002000, //you must know, you are using it!
    EPOS_OD_CAN_BIT_RATE = 0x1002001,
    EPOS_OD_RS232_BIT_RATE = 0x1002002,
    EPOS_OD_RS232_FRAME_TIMEOUT = 0x2002005,
    EPOS_OD_USB_FRAME_TIMEOUT = 0x2002006,
    //EPOS_OD_CAN_BIT_RATE_DISPLAY = 0x100200A, //you must know, you are using it!
    //EPOS_OD_ACTIVE_FIELDBUS = 0x1002010, //you must know, you are using it!
     EPOS_OD_ADDITIONAL_IDENTITY_SERIAL_NUMBER_COMPLETE = 0x8012100,
     EPOS_OD_CUSTOM_PERSISTENT_MEMORY_CUSTOM_PERSISTENT_MEMORY_1 = 0x401210C,
     EPOS_OD_CUSTOM_PERSISTENT_MEMORY_CUSTOM_PERSISTENT_MEMORY_2 = 0x402210C,
     EPOS_OD_CUSTOM_PERSISTENT_MEMORY_CUSTOM_PERSISTENT_MEMORY_3 = 0x403210C,
     EPOS_OD_CUSTOM_PERSISTENT_MEMORY_CUSTOM_PERSISTENT_MEMORY_4 = 0x404210C,
     EPOS_OD_POWER_SUPPLY_POWER_SUPPLY_VOLTAGE = 0x2012200,
     EPOS_OD_POWER_SUPPLY_VALID_LOGIC_SUPPLY = 0x1022200,
     EPOS_OD_POWER_SUPPLY_SUPERVISION_POWER_SUPPLY_UNDERVOLTAGE_LIMIT = 0x4012201,
     EPOS_OD_POWER_SUPPLY_SUPERVISION_POWER_SUPPLY_OVERVOLTAGE_LIMIT = 0x4022201,
     EPOS_OD_AXIS_CONFIGURATION_SENSORS_CONFIGURATION = 0x4013000,
     EPOS_OD_AXIS_CONFIGURATION_CONTROL_STRUCTURE = 0x4023000,
     EPOS_OD_AXIS_CONFIGURATION_COMMUTATION_SENSORS = 0x4033000,
     EPOS_OD_AXIS_CONFIGURATION_AXIS_CONFIGURATION_MISCELLANEOUS = 0x4043000,
     EPOS_OD_AXIS_CONFIGURATION_MAIN_SENSOR_RESOLUTION = 0x4053000,
     EPOS_OD_AXIS_CONFIGURATION_MAX_SYSTEM_SPEED = 0x4063000,
     EPOS_OD_MOTOR_DATA_NOMINAL_CURRENT = 0x4013001,
     EPOS_OD_MOTOR_DATA_OUTPUT_CURRENT_LIMIT = 0x4023001,
     EPOS_OD_MOTOR_DATA_NUMBER_OF_POLE_PAIRS = 0x1033001,
     EPOS_OD_MOTOR_DATA_THERMAL_TIME_CONSTANT_WINDING = 0x2043001,
     EPOS_OD_MOTOR_DATA_TORQUE_CONSTANT = 0x4053001,
     EPOS_OD_ELECTRICAL_SYSTEM_PARAMETERS_ELECTRICAL_RESISTANCE = 0x4013002,
     EPOS_OD_ELECTRICAL_SYSTEM_PARAMETERS_ELECTRICAL_INDUCTANCE = 0x2023002,
     EPOS_OD_GEAR_CONFIGURATION_GEAR_REDUCTION_NUMERATOR = 0x4013003,
     EPOS_OD_GEAR_CONFIGURATION_GEAR_REDUCTION_DENOMINATOR = 0x4023003,
     EPOS_OD_GEAR_CONFIGURATION_MAX_GEAR_INPUT_SPEED = 0x4033003,
     EPOS_OD_GEAR_CONFIGURATION_GEAR_MISCELLANEOUS_CONFIGURATION = 0x4043003,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_1_DIGITAL_INCREMENTAL_ENCODER_1_NUMBER_OF_PULSES = 0x4013010,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_1_DIGITAL_INCREMENTAL_ENCODER_1_TYPE = 0x2023010,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_1_DIGITAL_INCREMENTAL_ENCODER_1_INDEX_POSITION = 0x4043010,
     EPOS_OD_ANALOG_INCREMENTAL_ENCODER_ANALOG_INCREMENTAL_ENCODER_TYPE = 0x2013011,
     EPOS_OD_ANALOG_INCREMENTAL_ENCODER_ANALOG_INCREMENTAL_ENCODER_RESOLUTION = 0x4023011,
     EPOS_OD_ANALOG_INCREMENTAL_ENCODER_ANALOG_INCREMENTAL_ENCODER_INDEX_POSITION = 0x4033011,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_DATA_RATE = 0x2013012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_NUMBER_OF_DATA_BITS = 0x4023012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_ENCODING_TYPE = 0x2033012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_TIMEOUT_TIME = 0x2053012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_SPECIAL_BITS_DATA = 0x2063012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_REFRESH_FREQUENCY = 0x4073012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_POWER_UP_TIME = 0x2083012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_POSITION_RAW_VALUE = 0x4093012,
     EPOS_OD_SSI_ABSOLUTE_ENCODER_SSI_COMMUTATION_OFFSET_VALUE = 0x40A3012,
     EPOS_OD_DIGITAL_HALL_SENSORS_DIGITAL_HALL_SENSOR_TYPE = 0x201301A,
     EPOS_OD_DIGITAL_HALL_SENSORS_DIGITAL_HALL_SENSOR_PATTERN = 0x202301A,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_2_DIGITAL_INCREMENTAL_ENCODER_2_NUMBER_OF_PULSES = 0x4013020,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_2_DIGITAL_INCREMENTAL_ENCODER_2_TYPE = 0x2023020,
     EPOS_OD_DIGITAL_INCREMENTAL_ENCODER_2_DIGITAL_INCREMENTAL_ENCODER_2_INDEX_POSITION = 0x4043020,
     EPOS_OD_CURRENT_CONTROL_PARAMETER_SET_CURRENT_CONTROLLER_P_GAIN = 0x40130A0,
     EPOS_OD_CURRENT_CONTROL_PARAMETER_SET_CURRENT_CONTROLLER_I_GAIN = 0x40230A0,
     EPOS_OD_POSITION_CONTROL_PARAMETER_SET_POSITION_CONTROLLER_P_GAIN = 0x40130A1,
     EPOS_OD_POSITION_CONTROL_PARAMETER_SET_POSITION_CONTROLLER_I_GAIN = 0x40230A1,
     EPOS_OD_POSITION_CONTROL_PARAMETER_SET_POSITION_CONTROLLER_D_GAIN = 0x40330A1,
     EPOS_OD_POSITION_CONTROL_PARAMETER_SET_POSITION_CONTROLLER_FF_VELOCITY_GAIN = 0x40430A1,
     EPOS_OD_POSITION_CONTROL_PARAMETER_SET_POSITION_CONTROLLER_FF_ACCELERATION_GAIN = 0x40530A1,
     EPOS_OD_VELOCITY_CONTROL_PARAMETER_SET_VELOCITY_CONTROLLER_P_GAIN = 0x40130A2,
     EPOS_OD_VELOCITY_CONTROL_PARAMETER_SET_VELOCITY_CONTROLLER_I_GAIN = 0x40230A2,
     EPOS_OD_VELOCITY_CONTROL_PARAMETER_SET_VELOCITY_CONTROLLER_FF_VELOCITY_GAIN = 0x40330A2,
     EPOS_OD_VELOCITY_CONTROL_PARAMETER_SET_VELOCITY_CONTROLLER_FF_ACCELERATION_GAIN = 0x40430A2,
     EPOS_OD_VELOCITY_OBSERVER_PARAMETER_SET_VELOCITY_OBSERVER_POSITION_CORRECTION_GAIN = 0x40130A3,
     EPOS_OD_VELOCITY_OBSERVER_PARAMETER_SET_VELOCITY_OBSERVER_VELOCITY_CORRECTION_GAIN = 0x40230A3,
     EPOS_OD_VELOCITY_OBSERVER_PARAMETER_SET_VELOCITY_OBSERVER_LOAD_CORRECTION_GAIN = 0x40330A3,
     EPOS_OD_VELOCITY_OBSERVER_PARAMETER_SET_VELOCITY_OBSERVER_FRICTION = 0x40430A3,
     EPOS_OD_VELOCITY_OBSERVER_PARAMETER_SET_VELOCITY_OBSERVER_INERTIA = 0x40530A3,
     EPOS_OD_INTERNAL_VELOCITY_FILTER_PARAMETER_SET_INTERNAL_VELOCITY_FILTER_BANDWIDTH_CORRECTION_FACTOR = 0x40130A4,
     EPOS_OD_DUAL_LOOP_PARAMETER_SET_MAIN_LOOP_P_GAIN_LOW_BANDWIDTH = 0x40130AE,
     EPOS_OD_DUAL_LOOP_PARAMETER_SET_MAIN_LOOP_P_GAIN_HIGH_BANDWIDTH = 0x40230AE,
     EPOS_OD_DUAL_LOOP_PARAMETER_SET_MAIN_LOOP_GAIN_SCHEDULING_WEIGHT = 0x20330AE,
    EPOS_OD_HOME_POSITION = 0x40030B0,
    EPOS_OD_HOME_OFFSET_MOVE_DISTANCE = 0x40030B1,
    EPOS_OD_CURRENT_THRESHOLD_FOR_HOMING_MODE = 0x20030B2,
    EPOS_OD_CURRENT_DEMAND_VALUE = 0x40030D0,
     EPOS_OD_CURRENT_ACTUAL_VALUES_CURRENT_ACTUAL_VALUE_AVERAGED = 0x40130D1,
     EPOS_OD_CURRENT_ACTUAL_VALUES_CURRENT_ACTUAL_VALUE = 0x40230D1,
     EPOS_OD_TORQUE_ACTUAL_VALUES_TORQUE_ACTUAL_VALUE_AVERAGED = 0x20130D2,
     EPOS_OD_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_AVERAGED = 0x40130D3,
     EPOS_OD_STANDSTILL_WINDOW_CONFIGURATION_STANDSTILL_WINDOW = 0x40130E0,
     EPOS_OD_STANDSTILL_WINDOW_CONFIGURATION_STANDSTILL_WINDOW_TIME = 0x20230E0,
     EPOS_OD_STANDSTILL_WINDOW_CONFIGURATION_STANDSTILL_WINDOW_TIMEOUT = 0x20330E0,
     EPOS_OD_DIGITAL_INPUT_PROPERTIES_DIGITAL_INPUTS_LOGIC_STATE = 0x2013141,
     EPOS_OD_DIGITAL_INPUT_PROPERTIES_DIGITAL_INPUTS_POLARITY = 0x2023141,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_DIGITAL_INPUT_1_CONFIGURATION = 0x1013142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_DIGITAL_INPUT_2_CONFIGURATION = 0x1023142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_DIGITAL_INPUT_3_CONFIGURATION = 0x1033142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_DIGITAL_INPUT_4_CONFIGURATION = 0x1043142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_HIGH_SPEED_DIGITAL_INPUT_1_CONFIGURATION = 0x1053142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_HIGH_SPEED_DIGITAL_INPUT_2_CONFIGURATION = 0x1063142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_HIGH_SPEED_DIGITAL_INPUT_3_CONFIGURATION = 0x1073142,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_INPUTS_HIGH_SPEED_DIGITAL_INPUT_4_CONFIGURATION = 0x1083142,
     EPOS_OD_DIGITAL_OUTPUT_PROPERTIES_DIGITAL_OUTPUTS_LOGIC_STATE = 0x2013150,
     EPOS_OD_DIGITAL_OUTPUT_PROPERTIES_DIGITAL_OUTPUTS_POLARITY = 0x2023150,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_OUTPUTS_DIGITAL_OUTPUT_1_CONFIGURATION = 0x1013151,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_OUTPUTS_DIGITAL_OUTPUT_2_CONFIGURATION = 0x1023151,
     EPOS_OD_CONFIGURATION_OF_DIGITAL_OUTPUTS_HIGH_SPEED_DIGITAL_OUTPUT_1_CONFIGURATION = 0x1033151,
     EPOS_OD_HOLDING_BRAKE_PARAMETERS_HOLDING_BRAKE_RISE_TIME = 0x2013158,
     EPOS_OD_HOLDING_BRAKE_PARAMETERS_HOLDING_BRAKE_FALL_TIME = 0x2023158,
     EPOS_OD_ANALOG_INPUT_PROPERTIES_ANALOG_INPUT_1_VOLTAGE = 0x2013160,
     EPOS_OD_ANALOG_INPUT_PROPERTIES_ANALOG_INPUT_2_VOLTAGE = 0x2023160,
     EPOS_OD_ANALOG_INPUT_ADJUSTMENT_ANALOG_INPUT_1_ADJUSTMENT_OFFSET = 0x2013163,
     EPOS_OD_ANALOG_INPUT_ADJUSTMENT_ANALOG_INPUT_1_ADJUSTMENT_GAIN_FACTOR = 0x2023163,
     EPOS_OD_ANALOG_INPUT_ADJUSTMENT_ANALOG_INPUT_2_ADJUSTMENT_OFFSET = 0x2033163,
     EPOS_OD_ANALOG_INPUT_ADJUSTMENT_ANALOG_INPUT_2_ADJUSTMENT_GAIN_FACTOR = 0x2043163,
     EPOS_OD_ANALOG_OUTPUT_PROPERTIES_ANALOG_OUTPUT_1_VOLTAGE = 0x2013180,
     EPOS_OD_ANALOG_OUTPUT_PROPERTIES_ANALOG_OUTPUT_2_VOLTAGE = 0x2023180,
     EPOS_OD_CONFIGURATION_OF_ANALOG_OUTPUTS_ANALOG_OUTPUT_1_CONFIGURATION = 0x1013181,
     EPOS_OD_CONFIGURATION_OF_ANALOG_OUTPUTS_ANALOG_OUTPUT_2_CONFIGURATION = 0x1023181,
     EPOS_OD_ANALOG_OUTPUT_GENERAL_PURPOSE_ANALOG_OUTPUT_GENERAL_PURPOSE_A = 0x4013182,
     EPOS_OD_ANALOG_OUTPUT_GENERAL_PURPOSE_ANALOG_OUTPUT_GENERAL_PURPOSE_B = 0x4023182,
     EPOS_OD_MOTOR_PROTECTION_I2T_LEVEL_MOTOR = 0x2013200,
     EPOS_OD_MOTOR_PROTECTION_I2T_LEVEL_CONTROLLER = 0x2023200,
     EPOS_OD_THERMAL_CONTROLLER_PROTECTION_TEMPERATURE_POWER_STAGE = 0x2013201,
     EPOS_OD_FUNCTIONAL_SAFETY_STO_INPUT_STATES = 0x1013202,
     EPOS_OD_MOTOR_CONTROL_PWM_DUTY_CYCLE_ACTUAL_VALUE = 0x2013203,
    EPOS_OD_ABORT_CONNECTION_OPTION_CODE = 0x2006007,
    EPOS_OD_ERROR_CODE = 0x200603F,
    EPOS_OD_CONTROLWORD = 0x2006040,
    EPOS_OD_STATUSWORD = 0x2006041,
    EPOS_OD_QUICK_STOP_OPTION_CODE = 0x200605A,
    EPOS_OD_SHUTDOWN_OPTION_CODE = 0x200605B,
    EPOS_OD_DISABLE_OPERATION_OPTION_CODE = 0x200605C,
    EPOS_OD_FAULT_REACTION_OPTION_CODE = 0x200605E,
    EPOS_OD_MODES_OF_OPERATION = 0x1006060,
    EPOS_OD_MODES_OF_OPERATION_DISPLAY = 0x1006061,
    EPOS_OD_POSITION_DEMAND_VALUE = 0x4006062,
    EPOS_OD_POSITION_ACTUAL_VALUE = 0x4006064,
    EPOS_OD_FOLLOWING_ERROR_WINDOW = 0x4006065,
    EPOS_OD_FOLLOWING_ERROR_TIMEOUT = 0x2006066,
    EPOS_OD_POSITION_WINDOW = 0x4006067,
    EPOS_OD_POSITION_TIME = 0x2006068,
    EPOS_OD_VELOCITY_DEMAND_VALUE = 0x400606B,
    EPOS_OD_VELOCITY_ACTUAL_VALUE = 0x400606C,
    EPOS_OD_TARGET_TORQUE = 0x2006071,
    EPOS_OD_MOTOR_RATED_TORQUE = 0x4006076,
    EPOS_OD_TORQUE_ACTUAL_VALUE = 0x2006077,
    EPOS_OD_TARGET_POSITION = 0x400607A,
     EPOS_OD_POSITION_RANGE_LIMIT_MIN_POSITION_RANGE_LIMIT = 0x401607B,
     EPOS_OD_POSITION_RANGE_LIMIT_MAX_POSITION_RANGE_LIMIT = 0x402607B,
     EPOS_OD_SOFTWARE_POSITION_LIMIT_MIN_POSITION_LIMIT = 0x401607D,
     EPOS_OD_SOFTWARE_POSITION_LIMIT_MAX_POSITION_LIMIT = 0x402607D,
    EPOS_OD_MAX_PROFILE_VELOCITY = 0x400607F,
    EPOS_OD_MAX_MOTOR_SPEED = 0x4006080,
    EPOS_OD_PROFILE_VELOCITY = 0x4006081,
    EPOS_OD_PROFILE_ACCELERATION = 0x4006083,
    EPOS_OD_PROFILE_DECELERATION = 0x4006084,
    EPOS_OD_QUICK_STOP_DECELERATION = 0x4006085,
    EPOS_OD_MOTION_PROFILE_TYPE = 0x2006086,
    EPOS_OD_HOMING_METHOD = 0x1006098,
     EPOS_OD_HOMING_SPEEDS_SPEED_FOR_SWITCH_SEARCH = 0x4016099,
     EPOS_OD_HOMING_SPEEDS_SPEED_FOR_ZERO_SEARCH = 0x4026099,
    EPOS_OD_HOMING_ACCELERATION = 0x400609A,
    EPOS_OD_SI_UNIT_POSITION = 0x40060A8,
    EPOS_OD_SI_UNIT_VELOCITY = 0x40060A9,
    EPOS_OD_SI_UNIT_ACCELERATION = 0x40060AA,
    EPOS_OD_POSITION_OFFSET = 0x40060B0,
    EPOS_OD_VELOCITY_OFFSET = 0x40060B1,
    EPOS_OD_TORQUE_OFFSET = 0x20060B2,
    EPOS_OD_TOUCH_PROBE_FUNCTION = 0x20060B8,
    EPOS_OD_TOUCH_PROBE_STATUS = 0x20060B9,
    EPOS_OD_TOUCH_PROBE_1_POSITIVE_EDGE = 0x40060BA,
    EPOS_OD_TOUCH_PROBE_1_NEGATIVE_EDGE = 0x40060BB,
     EPOS_OD_INTERPOLATION_TIME_PERIOD_INTERPOLATION_TIME_PERIOD_VALUE = 0x10160C2,
     EPOS_OD_INTERPOLATION_TIME_PERIOD_INTERPOLATION_TIME_INDEX = 0x10260C2,
    EPOS_OD_MAX_ACCELERATION = 0x40060C5,
     EPOS_OD_TOUCH_PROBE_SOURCE_TOUCH_PROBE_1_SOURCE = 0x20160D0,
    EPOS_OD_TOUCH_PROBE_1_POSITIVE_EDGE_COUNTER = 0x20060D5,
    EPOS_OD_TOUCH_PROBE_1_NEGATIVE_EDGE_COUNTER = 0x20060D6,
     EPOS_OD_ADDITIONAL_POSITION_ACTUAL_VALUES_POSITION_ACTUAL_VALUE_SENSOR_1 = 0x40160E4,
     EPOS_OD_ADDITIONAL_POSITION_ACTUAL_VALUES_POSITION_ACTUAL_VALUE_SENSOR_2 = 0x40260E4,
     EPOS_OD_ADDITIONAL_POSITION_ACTUAL_VALUES_POSITION_ACTUAL_VALUE_SENSOR_3 = 0x40360E4,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_SENSOR_1 = 0x40160E5,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_SENSOR_2 = 0x40260E5,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_SENSOR_3 = 0x40360E5,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_AVERAGED_SENSOR_1 = 0x40960E5,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_AVERAGED_SENSOR_2 = 0x40A60E5,
     EPOS_OD_ADDITIONAL_VELOCITY_ACTUAL_VALUES_VELOCITY_ACTUAL_VALUE_AVERAGED_SENSOR_3 = 0x40B60E5,
    EPOS_OD_FOLLOWING_ERROR_ACTUAL_VALUE = 0x40060F4,
    EPOS_OD_DIGITAL_INPUTS = 0x40060FD,
     EPOS_OD_DIGITAL_OUTPUTS_PHYSICAL_OUTPUTS = 0x40160FE,
    EPOS_OD_TARGET_VELOCITY = 0x40060FF,
    EPOS_OD_MOTOR_TYPE = 0x2006402,
    //EPOS_OD_SUPPORTED_DRIVE_MODES = 0x4006502, // always = 0b01110100101 for all epos4s
} EPOS_OD_t;
/********************************************************************************
 * @defgroup odEnum Object Dictionary indices
 * @brief Definition of EPOS_OD_t type.
********************************************************************************/


/********************************************************************************
 * @ingroup statusEnum
 * @brief Error Codes, for Master, EPOS4, and SDO abort. \n 
 * Can be parsed using EPOS4::parseError().
********************************************************************************/
typedef enum ERROR_CODE{
    // Generic no error vvv
    ERROR_CODE_NOERROR = 0x0000,

    // Master error codes vvv
    MASTER_ERROR_CODE_GENERIC_ERROR    = 0x0100, /**< Generic Error */
    MASTER_ERROR_CODE_CAN_ERROR        = 0x0101, /**< The TWAI driver or CAN Bus are incorrectly configured */
    MASTER_ERROR_CODE_ARGUMENT_ERROR   = 0x0102, /**< The function arguments are invalid */
    MASTER_ERROR_CODE_TIMEOUT_ERROR    = 0x0104, /**< EPOS4 did not send the correct response in time, possibly a CAN error */
    MASTER_ERROR_CODE_EPOS4_ERROR      = 0x0108, /**< Function cannot be used as EPOS4 is in an error state */
    MASTER_ERROR_CODE_SDO_ERROR        = 0x0110, /**< SDO was not accepted */

    /** 0x1000 to 0xFF22: EPOS4 Error Codes */
    EPOS_ERROR_CODE_GENERIC_ERROR = 0x1000,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR = 0x1080,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR2 = 0x1081,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR3 = 0x1082,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR4 = 0x1083,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR5 = 0x1084,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR6 = 0x1085,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR7 = 0x1086,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR8 = 0x1087,
    EPOS_ERROR_CODE_GENERIC_INITIALIZATION_ERROR9 = 0x1088,
    EPOS_ERROR_CODE_FIRMWARE_INCOMPATIBILITY_ERROR = 0x1090,
    EPOS_ERROR_CODE_OVERCURRENT_ERROR = 0x2310,
    EPOS_ERROR_CODE_POWER_STAGE_PROTECTION_ERROR = 0x2320,
    EPOS_ERROR_CODE_OVERVOLTAGE_ERROR = 0x3210,
    EPOS_ERROR_CODE_UNDERVOLTAGE_ERROR = 0x3220,
    EPOS_ERROR_CODE_THERMAL_OVERLOAD_ERROR = 0x4210,
    EPOS_ERROR_CODE_THERMAL_MOTOR_OVERLOAD_ERROR = 0x4380,
    EPOS_ERROR_CODE_LOGIC_SUPPLY_VOLTAGE_TOO_LOW_ERROR = 0x5113,
    EPOS_ERROR_CODE_HARDWARE_DEFECT_ERROR = 0x5280,
    EPOS_ERROR_CODE_HARDWARE_INCOMPATIBILITY_ERROR = 0x5281,
    EPOS_ERROR_CODE_HARDWARE_ERROR = 0x5480,
    EPOS_ERROR_CODE_HARDWARE_ERROR2 = 0x5481,
    EPOS_ERROR_CODE_HARDWARE_ERROR3 = 0x5482,
    EPOS_ERROR_CODE_HARDWARE_ERROR4 = 0x5483,
    EPOS_ERROR_CODE_SIGN_OF_LIFE_ERROR = 0x6080,
    EPOS_ERROR_CODE_EXTENSION_1_WATCHDOG_ERROR = 0x6081,
    EPOS_ERROR_CODE_INTERNAL_SOFTWARE_ERROR = 0x6180,
    EPOS_ERROR_CODE_SOFTWARE_PARAMETER_ERROR = 0x6320,
    EPOS_ERROR_CODE_PERSISTENT_PARAMETER_CORRUPT_ERROR = 0x6380,
    EPOS_ERROR_CODE_POSITION_SENSOR_ERROR = 0x7320,
    EPOS_ERROR_CODE_POSITION_SENSOR_BREACH_ERROR_P_CLR = 0x7380,
    EPOS_ERROR_CODE_POSITION_SENSOR_RESOLUTION_ERROR_P_CLR = 0x7381,
    EPOS_ERROR_CODE_POSITION_SENSOR_INDEX_ERROR_P_CLR = 0x7382,
    EPOS_ERROR_CODE_HALL_SENSOR_ERROR_P_CLR = 0x7388,
    EPOS_ERROR_CODE_HALL_SENSOR_NOT_FOUND_ERROR_P_CLR = 0x7389,
    EPOS_ERROR_CODE_HALL_ANGLE_DETECTION_ERROR_P_CLR = 0x738A,
    EPOS_ERROR_CODE_SSI_SENSOR_ERROR = 0x738C,
    EPOS_ERROR_CODE_SSI_SENSOR_FRAME_ERROR = 0x738D,
    EPOS_ERROR_CODE_MISSING_MAIN_SENSOR_ERROR = 0x7390,
    EPOS_ERROR_CODE_MISSING_COMMUTATION_SENSOR_ERROR = 0x7391,
    EPOS_ERROR_CODE_MAIN_SENSOR_DIRECTION_ERROR_P_CLR = 0x7392,
    EPOS_ERROR_CODE_CAN_OVERRUN_ERROR_OBJECT_LOST = 0x8110,
    EPOS_ERROR_CODE_CAN_OVERRUN_ERROR = 0x8111,
    EPOS_ERROR_CODE_CAN_PASSIVE_MODE_ERROR = 0x8120,
    EPOS_ERROR_CODE_CAN_HEARTBEAT_ERROR = 0x8130,
    EPOS_ERROR_CODE_CAN_PDO_COBID_COLLISION = 0x8150,
    EPOS_ERROR_CODE_CAN_BUS_TURNED_OFF = 0x81FD,
    EPOS_ERROR_CODE_CAN_RX_QUEUE_OVERFLOW = 0x81FE,
    EPOS_ERROR_CODE_CAN_TX_QUEUE_OVERFLOW = 0x81FF,
    EPOS_ERROR_CODE_CAN_PDO_LENGTH_ERROR = 0x8210,
    EPOS_ERROR_CODE_RPDO_TIMEOUT = 0x8250,
    EPOS_ERROR_CODE_FOLLOWING_ERROR = 0x8611,
    EPOS_ERROR_CODE_NEGATIVE_LIMIT_SWITCH_ERROR = 0x8A80,
    EPOS_ERROR_CODE_POSITIVE_LIMIT_SWITCH_ERROR = 0x8A81,
    EPOS_ERROR_CODE_SOFTWARE_POSITION_LIMIT_ERROR = 0x8A82,
    EPOS_ERROR_CODE_STO_ERROR = 0x8A88,
    EPOS_ERROR_CODE_SYSTEM_OVERLOADED_ERROR = 0xFF01,
    EPOS_ERROR_CODE_WATCHDOG_ERROR_P_CLR = 0xFF02,
    EPOS_ERROR_CODE_SYSTEM_PEAK_OVERLOADED_ERROR = 0xFF0B,
    EPOS_ERROR_CODE_CONTROLLER_GAIN_ERROR = 0xFF10,
    EPOS_ERROR_CODE_AUTO_TUNING_CURRENT_LIMIT_ERROR = 0xFF12,
    EPOS_ERROR_CODE_AUTO_TUNING_IDENTIFICATION_CURRENT_ERROR = 0xFF13,
    EPOS_ERROR_CODE_AUTO_TUNING_DATA_SAMPLING_ERROR = 0xFF14,
    EPOS_ERROR_CODE_AUTO_TUNING_SAMPLE_MISMATCH_ERROR = 0xFF15,
    EPOS_ERROR_CODE_AUTO_TUNING_PARAMETER_ERROR = 0xFF16,
    EPOS_ERROR_CODE_AUTO_TUNING_AMPLITUDE_MISMATCH_ERROR = 0xFF17,
    EPOS_ERROR_CODE_AUTO_TUNING_PERIOD_LENGTH_ERROR = 0xFF18,
    EPOS_ERROR_CODE_AUTO_TUNING_TIMEOUT_ERROR = 0xFF19,
    EPOS_ERROR_CODE_AUTO_TUNING_STANDSTILL_ERROR = 0xFF20,
    EPOS_ERROR_CODE_AUTO_TUNING_TORQUE_INVALID_ERROR = 0xFF21,
    EPOS_ERROR_CODE_AUTO_TUNING_MAX_SYSTEM_SPEED_ERROR = 0xFF22,

    /** 0x0503'0000 to 0x0800'0023: SDO Error Codes */
    SDO_ERROR_CODE_TOGGLE_BIT = 0x05030000, 
    SDO_ERROR_CODE_TIMEOUT = 0x05040000,
    SDO_ERROR_CODE_COMMAND_INVALID = 0x05040001,
    SDO_ERROR_CODE_BLOCK_SIZE_INVALID = 0x05040002,
    SDO_ERROR_CODE_BLOCK_SEQUENCE_INVALID = 0x05040003,
    SDO_ERROR_CODE_BLOCK_CRC_INVALID = 0x05040004,
    SDO_ERROR_CODE_OUT_OF_MEMORY = 0x05040005,
    SDO_ERROR_CODE_ACCESS_INVALID = 0x06010000,
    SDO_ERROR_CODE_READ_WRITEONLY = 0x06010001,
    SDO_ERROR_CODE_WRITE_READONLY = 0x06010002,
    SDO_ERROR_CODE_OBJECT_INVALID = 0x06020000,
    SDO_ERROR_CODE_PDO_UNMAPPABLE = 0x06040041,
    SDO_ERROR_CODE_PDO_TOO_LONG = 0x06040042,
    SDO_ERROR_CODE_GENERAL_INVALID_PARAMETER = 0x06040043,
    SDO_ERROR_CODE_GENERAL_INVALID_DEVICE = 0x06040047,
    SDO_ERROR_CODE_HARDWARE_ERROR = 0x06060000,
    SDO_ERROR_CODE_TYPE_MISMATCH = 0x06070010,
    SDO_ERROR_CODE_TYPE_TOO_LONG = 0x06070012,
    SDO_ERROR_CODE_TYPE_TOO_SHORT = 0x06070013,
    SDO_ERROR_CODE_SUBINDEX_INALID = 0x06090011,
    SDO_ERROR_CODE_PARAMETER_RANGE_MISMATCH = 0x06090030,
    SDO_ERROR_CODE_PARAMETER_RANGE_HIGHER = 0x06090031,
    SDO_ERROR_CODE_PARAMETER_RANGE_LOWER = 0x06090032,
    SDO_ERROR_CODE_PARAMETER_MAX_BELOW_MIN = 0x06090036,
    SDO_ERROR_CODE_GENERAL_ERROR = 0x08000000,
    SDO_ERROR_CODE_CANNOT_BE_STORED = 0x08000020,
    SDO_ERROR_CODE_CANNOT_BE_STORED_LOCAL = 0x08000021,
    SDO_ERROR_CODE_CANNOT_BE_STORED_STATE = 0x08000022,
    SDO_ERROR_CODE_OBJECT_DICTIONARY_ERROR = 0x08000023,
} ERROR_CODE_t;


/********************************************************************************
 * @ingroup motionEnum
 * @brief EPOS4 motion operation mode
********************************************************************************/
typedef enum EPOS_OPERATION_MODE{
    EPOS_OPERATION_MODE_PPM  = 1,       /**< 1  Profile Position Mode (PPM) */
    EPOS_OPERATION_MODE_PVM  = 3,       /**< 3  Profile Velocity Mode (PVM) */
    EPOS_OPERATION_MODE_HMM  = 6,       /**< 6  Homing Mode (HMM) */
    EPOS_OPERATION_MODE_CSP  = 8,       /**< 8  Cyclic Synchronous Position Mode (CSP) */
    EPOS_OPERATION_MODE_CSV  = 9,       /**< 9  Cyclic Synchronous Velocity Mode (CSV) */
    EPOS_OPERATION_MODE_CST  = 10       /**< 10 Cyclic Synchronous Torque Mode (CST) */
} EPOS_OPERATION_MODE_t;


/********************************************************************************
 * @ingroup statusEnum
 * @brief Network Management (NMT) States 
********************************************************************************/
typedef enum NMT_STATE{
    /** Initialisation. \n 
    Will automatically transition to 'Pre-Operational', then send one heartbeat. */
    NMT_STATE_BOOTUP = 0x0,
    /** Stopped. \n 
    No PDO or SDO communication allowed. \n 
    Only NMT and Heartbeat frames can be used. */
    NMT_STATE_STOPPED = 0x04,
    /** Operational. \n 
    PDO communication is only allowed in 'Operational' state. */
    NMT_STATE_OPERATIONAL = 0x05,
    /** Pre-Operational. \n 
    PDO Mappings may only be configured while in 'Pre-Operational' state. */
    NMT_STATE_PRE_OPERATIONAL = 0x7f
} NMT_STATE_t;


/********************************************************************************
 * @ingroup statusEnum
 * @brief Network Management (NMT) Commands. \n 
 * On startup, the EPOS4 will automatically Transition from 
 * 'Initialisation' to 'Pre-Operational'.
********************************************************************************/
typedef enum NMT_COMMAND{
    /** Start Remote Node -> Operational */
    NMT_COMMAND_GOTO_OPERATIONAL = 0x1,
    /** Stop Remote Node -> Stopped */
    NMT_COMMAND_GOTO_STOPPED = 0x02,
    /** Enter Pre-Operational -> Pre-Operational */
    NMT_COMMAND_GOTO_PRE_OPERATIONAL = 0x80,
    /** Reset Node -> Initialisation -> Pre-Operational \n 
    Same as a power restart: **All unsaved configurations will be lost!** */
    NMT_COMMAND_GOTO_RESET_NODE = 0x81,
    /** Reset Communication -> Initialisation -> Pre-Operational \n 
    Recalculates SDO and PDO COB-IDs. */
    NMT_COMMAND_RESET_COMMUNICATION = 0x82
} NMT_COMMAND_t;


/********************************************************************************
 * @ingroup motionEnum
 * @brief EPOS4 StatusWord bits. \n 
 * Bits 0, 1, 2, 3, 5, and 6 are interpreted by EPOS4::getAxisState()
********************************************************************************/
typedef enum SW_BITS{
    SW_BITS_READY_TO_SWITCH_ON,                 /**< Ready to switch on */
    SW_BITS_SWITCHED_ON,                        /**< Switched on */
    SW_BITS_OPERATION_ENABLED,                  /**< Operation enabled */
    SW_BITS_FAULT,                              /**< Fault */
    SW_BITS_VOLTAGE_ENABLED,                    /**< Voltage enabled (power stage on) */
    SW_BITS_QUICK_STOP,                         /**< Quick stop */
    SW_BITS_SWITCH_ON_DISABLED,                 /**< Switch on disabled */
    SW_BITS_WARNING,                            /**< Warning */
    SW_BITS_RESERVED8,
    SW_BITS_REMOTE,                             /**< Remote: Indicates NMT state is 'Operational' */
    SW_BITS_TARGET_REACHED,                     /**< PPM, PVM, HMM: Target Reached */
    SW_BITS_INTERNAL_LIMIT_ACTIVE,              /**< I2t, Current, Velocity limit active */
    SW_BITS_SET_POINT_ACK,                      /**< PPM: Setpoint Acknowledged */
    SW_BITS_HOMING_ATTAINED = 12,               /**< HMM: Homing Attained */
    SW_BITS_SPEED_IS_ZERO = 12,                 /**< PVM: Speed is Zero */
    SW_BITS_DRIVE_FOLLOWS_COMMAND_VALUE = 12,   /**< CSP, CSV, CST: Drive Following Command Value */
    SW_BITS_FOLLOWING_ERROR = 13,               /**< PPM, CSP: Following Error */
    SW_BITS_HOMING_ERROR = 13,                  /**< HMM: Homing Error */
    SW_BITS_RESERVED14,
    SW_BITS_POSITION_REFERENCED_TO_HOME = 15 /**< Position Referenced to Home */
} SW_BITS_t;


/********************************************************************************
 * @ingroup motionEnum
 * @brief EPOS4 ControlWord bits. \n 
 * Bits 0, 1, 2, 3, and 7 can be controlled using EPOS4::sendAxisCommand()
********************************************************************************/
typedef enum CW_BITS{
    CW_BITS_SWITCH_ON = 0,              /**< Switch On */
    CW_BITS_ENABLE_VOLTAGE = 1,         /**< Enable Voltage */
    CW_BITS_QUICK_STOP = 2,             /**< Quick Stop */
    CW_BITS_ENABLE_OPERATION = 3,       /**< Enable Operation */
    CW_BITS_NEW_SET_POINT = 4,          /**< PPM: New Setpoint */
    CW_BITS_HOMING_OPERATION_START = 4, /**< HMM: Start Homing operation */
    CW_BITS_CHANGE_SET_IMMEDIATELY = 5, /**< PPM: Change Setpoint immediately */
    CW_BITS_ABS_OR_RELATIVE = 6,        /**< PPM: Absolute or Relative position. 1 = Relative */
    CW_BITS_FAULT_RESET = 7,            /**< Fault reset */
    CW_BITS_HALT = 8,                   /**< PPM, PVM, HMM: Halt */
    CW_BITS_RESERVED9,                  
    CW_BITS_RESERVED10,                 
    CW_BITS_RESERVED11,                 
    CW_BITS_RESERVED12,                 
    CW_BITS_RESERVED13,                 
    CW_BITS_RESERVED14,                 
    CW_BITS_ENDLESS_MOVEMENT = 15       /**< PPM: Endless movement */
} CW_BITS_t;


/********************************************************************************
 * @ingroup statusEnum
 * @brief EPOS4 Error Register Bits.
********************************************************************************/
typedef enum ER_BITS{
    ER_BITS_GENERIC,            /**< Generic error */
    ER_BITS_CURRENT,            /**< Current error */
    ER_BITS_VOLTAGE,            /**< Voltage error */
    ER_BITS_TEMPERATURE,        /**< Temperature error */
    ER_BITS_COMMUNICATION,      /**< Communication error */
    ER_BITS_PROFILE_SPECIFIC,   /**< Device Profile Specfic */
    ER_BITS_RESERVED,           /**< Reserved (always 0) */
    ER_BITS_MOTION              /**< Motion Error */
} ER_BITS_t;


/********************************************************************************
 * @ingroup motionEnum
 * @brief Homing Methods. See EPOS4 Firmware Specification 3.5.3 Homing Modes.
********************************************************************************/
typedef enum HOMING_METHOD{
    HM_NEGATIVE_LIMIT_INDEX = 1,            
    HM_POSITIVE_LIMIT_INDEX = 2,            
    HM_HOME_POSITIVE_SPEED_INDEX = 7,       
    HM_HOME_NEGATIVE_SPEED_INDEX = 11,      
    HM_NEGATIVE_LIMIT = 17,                 
    HM_POSITIVE_LIMIT = 18,                 
    HM_HOME_POSITIVE_SPEED = 23,            
    HM_HOME_NEGATIVE_SPEED = 27,            
    HM_INDEX_NEGATIVE_SPEED = 33,           
    HM_INDEX_POSITIVE_SPEED = 34,           
    HM_ACTUAL_POSITION = 37,                
    HM_CURRENT_NEGATIVE_SPEED_INDEX = -2,   
    HM_CURRENT_POSITIVE_SPEED_INDEX = -1,   
    HM_CURRENT_NEGATIVE_SPEED = -4,         
    HM_CURRENT_POSITIVE_SPEED = -3,         
} HOMING_METHOD_t;


/********************************************************************************
 * @ingroup PDOEnum
 * @brief PDO Type, Number, and corresponding COB-ID base.
********************************************************************************/
typedef enum PDO_TYPE{
    TXPDO1 = 0x180,     /**< TxPDO Number 1, COB-ID Base: 0x180 */
    TXPDO2 = 0x280,     /**< TxPDO Number 2, COB-ID Base: 0x280 */
    TXPDO3 = 0x380,     /**< TxPDO Number 3, COB-ID Base: 0x380 */
    TXPDO4 = 0x480,     /**< TxPDO Number 4, COB-ID Base: 0x480 */
    RXPDO1 = 0x200,     /**< RxPDO Number 1, COB-ID Base: 0x200 */
    RXPDO2 = 0x300,     /**< RxPDO Number 2, COB-ID Base: 0x300 */
    RXPDO3 = 0x400,     /**< RxPDO Number 3, COB-ID Base: 0x400 */
    RXPDO4 = 0x500,     /**< RxPDO Number 4, COB-ID Base: 0x500 */
} PDO_TYPE_t;


/********************************************************************************
 * @ingroup PDOEnum
 * @brief PDO transmission modes.
********************************************************************************/
typedef enum PDO_TRANSMISSION_MODE{
    /** Synchronous: 
    - TXPDO: Transmits from EPOS4 after a SYNC object
    - RXPDO: Only writes values to EPOS4 object dictionary after a SYNC object */
    PDO_TRANSMISSION_MODE_SYNC = 1,         
    /** Asynchronous RTR: 
    - **TXPDO only**: Transmits from EPOS4 only when requested by the Master */
    PDO_TRANSMISSION_MODE_ASYNC_RTR = 253,
    /** Asynchronous: 
    - TXPDO: Transmitted from EPOS4 when a mapped value changes, 
    with a defined minimum period
    - RXPDO: Writes values to EPOS4 object dictionary immediately */
    PDO_TRANSMISSION_MODE_ASYNC = 255
} PDO_TRANSMISSION_MODE_t;


/********************************************************************************
 * @ingroup statusEnum
 * @brief State of the Drive Axis States. \n 
 * Retrieved from the StatusWord using the mask 0b0110'1111. 
 * See EPOS4 Firmware Specification 2.2.1 State of the Drive.
********************************************************************************/
typedef enum EPOS_AXIS_STATE{
    /** Drive function is disabled */
    AXIS_STATE_NOT_READY_TO_SWITCH_ON   = 0b00000000,    
    /** Drive initialization is complete. \n 
    Drive parameters may be changed. \n 
    Drive function is disabled. */
    AXIS_STATE_SWITCH_ON_DISABLED       = 0b01000000,  
    /** Drive parameters may be changed. \n 
    Drive function is disabled. */
    AXIS_STATE_READY_TO_SWITCH_ON       = 0b00100001,   
    /** Drive function is disabled. \n 
    Current offset calibration done */
    AXIS_STATE_SWITCHED_ON              = 0b00100011,   
    /** No faults have been detected. \n 
    Drive function is enabled and power is applied to the motor. */
    AXIS_STATE_OPERATION_ENABLED        = 0b00100111,   
    /** 'Quick stop' function is being executed. \n 
    Drive function is enabled and power is applied to the motor. */
    AXIS_STATE_QUICK_STOP_ACTIVE        = 0b00000111,   
    /** A fault has occurred in the drive. \n 
    Selected fault reaction is being executed. */
    AXIS_STATE_FAULT_REACTION_ACTIVE    = 0b00001111,  
    /** A fault has occurred in the drive. \n 
    Drive parameters may have changed. \n 
    Drive function is disabled. */
    AXIS_STATE_FAULT                    = 0b00001000    
} EPOS_AXIS_STATE_t;


/********************************************************************************
 * @ingroup statusEnum
 * @brief Control Commands. \n 
 * Bit masks are encoded in the upper byte. \n  
 * See EPOS4 Firmware Specification 2.2.3 Device Control Commands.
********************************************************************************/
typedef enum EPOS_AXIS_COMMAND{               //....''''....''''
    /** State transitions 2, 6, 8. 'Shutdown' */
    AXIS_COMMAND_SHUTDOWN                   = 0b1000011100000110, 
    /** State transition 3 'Switch On'*/
    AXIS_COMMAND_SWITCH_ON                  = 0b1000011100000111, 
    /** State transitions 3, 4 'Switch On & Enable Motion'*/
    AXIS_COMMAND_SWITCH_ON_ENABLE_OPERATION = 0b1000111100001111, 
    /** State transitions 7, 9, 10, 12 'Disable Voltage'*/
    AXIS_COMMAND_DISABLE_VOLTAGE            = 0b1000001000000000, 
    /** State transition 11 'Quick Stop'*/
    AXIS_COMMAND_QUICK_STOP                 = 0b1000011000000010, 
    /** State transition 5 'Switch On, Disable Torque'*/
    AXIS_COMMAND_DISABLE_OPERATION          = 0b1000111100000111, 
    /** State transitions 4, 16 'Enable Motion'*/
    AXIS_COMMAND_ENABLE_OPERATION           = 0b1000111100001111, 
    /** State transitions 14, 15 'Reset Fault, Disable Voltage'*/
    AXIS_COMMAND_FAULT_RESET                = 0b1000000010000000, 
} EPOS_AXIS_COMMAND_t;


/********************************************************************************
 * @ingroup PDOEnum
 * @brief PDO mapping structure.
********************************************************************************/
typedef struct PDO_MAPPING{         
    /** TX/RX PDO number to configure */
    PDO_TYPE_t PDONumber;                  
    /** The transmission type, which determines the PDO scheduling. */
    PDO_TRANSMISSION_MODE_t mode;                 
    /** Object Dictionary indices of each mapped object */  
    std::vector<EPOS_OD_t> targetIndexes;      
    /** Byte length of each mapped object. **Must total 8 or less**.
    Leave uninitialised to determine automatically from targetIndexes */     
    std::vector<int32_t> targetLengths;                 
} PDO_MAPPING_t;


/**
 * @brief   Structure to store a CAN message
 *
 * @note    The flags member is deprecated
 */
typedef struct {
    uint32_t flags;                 /**< Deprecated: Alternate way to set bits using message flags */
    uint32_t identifier;                /**< 11 or 29 bit identifier */
    uint8_t data_length_code;           /**< Data length code */
    uint8_t data[8];    /**< Data bytes (not relevant in RTR frame) */
} CAN_MESSAGE_t;


#define TWAI_MSG_FLAG_NONE              0x00        /**< No message flags (Standard Frame Format) */
#define TWAI_MSG_FLAG_RTR               0x02        /**< Message is a Remote Frame */





class EPOS4 {

    private:
        // PRIVATE MEMBERS ARE NOT SHOWN IN DOCS ****************************************

        std::map<uint32_t, PDO_MAPPING_t> m_PDOMap; //PDO COB-ID to map object
        std::map<std::string, uint32_t> m_PDOCOB_IDs;
        uint32_t last_heartbeat;
        uint16_t unknownBadSDO = 0;

        //outdated docu
        /********************************************************************************
         * @brief Local copy of the object dictionary of the EPOS4. \n 
         * **This is READ ONLY. Values are only sent to the EPOS4 using EPOS4::sendSDO() and sendPDO()**. \n
         * Access values using EPOS4.localOD[EPOS_OD_t]. \n 
         * Values are updated when CAN frames are parsed by the receiver, 
         * use EPOS4::requestSDO() or PDOs to ensure local values are up to date before reading.
        ********************************************************************************/   
        std::map<EPOS_OD_t, std::pair<int32_t, uint8_t>> local_OD;

        /********************************************************************************
         * @brief Node ID of the EPOS4 device. \n 
         * This should never need to be accessed by user program after initialisation!
        ********************************************************************************/ 
        uint16_t m_node_id;

        /********************************************************************************
         * @brief Splits the input integer param into its corresponding bytes. Small Endian.
         * Example:
         * 
         *      char splitBytes[4]; 
         *      getBytes(inputInteger, splitBytes);
         *      // Access bytes 
         *      char byte1 =  splitBytes[0]; 
         *      char byte4 =  splitBytes[3];
         * 
         * @param x Input integer
         * @param bytes Pointer to an array with the input split into its bytes
        ********************************************************************************/
        void getBytes(int32_t x, char* bytes);




    public:
        /*******************************************************************************/
        /******************************** PUBLIC MEMBERS *******************************/
        /********************************************************************************
         * @defgroup publics  General EPOS4 Members
         * @brief Storage of local Object Dictionary and NMT state.
        *@{*****************************************************************************/

        
        NMT_STATE_t lastHbNMT = NMT_STATE_BOOTUP;



        /********************************************************************************
         * @brief Returns the locally stored value of an Object Dictionary entry. \n 
         * The local value is the most recent value sent by the Master or received from the EPOS4, 
         * and may not be valid or up to date! \n 
         * Validity can be determined using EPOS4::localODstatus()
         * 
         * @param index The index of the Object.
         * @return The locally stored value for the chosen object.
        ********************************************************************************/
        int32_t localOD(EPOS_OD_t index){return local_OD[index].first;};


        /********************************************************************************
         * @brief Returns the status of an Object Dictionary entry's local value. \n 
         * Whether a value is up to date is not able to be determined from the status, 
         * and it is up to the user to define. \n
         * The bits of the status are defined as follows:
         * - bit 0: Most recent SDO read request response was valid.
         * - bit 1: Most recent SDO write request response was valid.
         * - bit 2: Bad SDO read or write, **ENTRY IS LIKELY INVALID**.
         * - bits 3 - 6: Reserved for future use.
         * - bit 7: OD entry mapped to an asynchronous TxPDO, 
         * and will be automatically updated to the latest value from the EPOS4.
         * 
         * If bits 0, 1, 2 are all zero, then the object is waiting for an SDO reply.
         * More detailed errors are passed by the EPOS4::receiver() function.
         * 
         * @param index The index of the Object.
         * @return The status of the chosen local object.
        ********************************************************************************/
        uint8_t localODstatus(EPOS_OD_t index){return local_OD[index].second;};


        //get od value only from EPOS4. 
        //**NO INHERENT ERROR CHECK ABILITY** error checking on the receiver recommended if using this function. 
        /********************************************************************************
         * @brief Gets an up to date value of the chosen Object Dictionary entry. \n 
         * If the entry is not automatically updated though an Asynchronous TxPDO, 
         * it will be requested using an SDO. In this case, the function will block 
         * execution until the requested value has been returned from the EPOS4. \n 
         * 
         * It is recommended to check for SDO communication errors if using this function, 
         * by monitoring the return of the EPOS4::receiver() function. 
         * Otherwise, validity can be checked afterwards by using EPOS4::localODstatus().
         * 
         * @param index The index of the Object.
         * @return An up to date value of the chosen object.
        ********************************************************************************/
        uint32_t getODvalue(EPOS_OD_t index);

        //get Object dictionary pair. requests SDO if needed by default.
        // <Object Value, Object Status>
        //see EPOS4::localODstatus() for status bit definition
        /********************************************************************************
         * @brief Gets an up to date value of the chosen Object Dictionary entry. \n 
         * If the entry is not automatically updated though an Asynchronous TxPDO, 
         * it will be requested using an SDO. In this case, the function will block 
         * execution until the requested value has been returned from the EPOS4. \n 
         * The status output is the same as would be returned by EPOS4::localODstatus().
         * 
         * @param index The index of the Object.
         * @return An up to date value of the chosen object, and the status of the object.
        ********************************************************************************/
        std::pair<int32_t, uint8_t> getODpair(EPOS_OD_t index);


        /********************************************************************************
         * @brief Construct a new EPOS4 object.
         * 
         * @param nodeID The node-ID the corresponding EPOS4 is configured with.
        ********************************************************************************/        
        EPOS4(int32_t nodeID);




        /**@}*//************************************************************************/
        /******************************** NODE AGNOSTIC ********************************/
        /********************************************************************************
         * @defgroup nodeagnostic  Node Agnostic Functions
         * @brief Functions which can affect multiple nodes at once, or are part of the Master's setup.
        *@{*****************************************************************************/


        static void setErrorFunction(void (*userfunc)(const char* tag, const char* format, ...));
        static void setInfoFunction(void (*userfunc)(const char* tag, const char* format, ...));
        static void setDebugFunction(void (*userfunc)(const char* tag, const char* format, ...));

        static void setWaitFunction(void (*userfunc)(uint32_t timeMS));
        static void setGetTimeFunction(uint32_t (*userfunc)());
        static void setCanTxFunction(ERROR_CODE_t (*userfunc)(CAN_MESSAGE_t* canFrame));



        /********************************************************************************
         * @brief Broadcasts a SYNC Object onto the CAN bus.
         * 
         * @return  ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        static ERROR_CODE_t broadcastSync();


        /********************************************************************************
         * @brief Function used to control the Network Management (NMT) state 
         * for devices on the CAN bus.
         * 
         * @param NMTCommand The NMT command to execute.
         * @param nodeID Node to send the NMT command to. Default 0 (All nodes) 
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful. 
        ********************************************************************************/ 
        static ERROR_CODE_t changeNMTState(NMT_COMMAND_t NMTCommand, uint8_t nodeID = 0x00);


        /********************************************************************************
         * @brief Broadcast a Heartbeat frame onto the CAN bus.
         * 
         * @param heartbeatNodeID The node-ID to be broadcast with the heartbeat frame. \n 
         * It should match the HBnodeID configured for the heartbeat consumer.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        static ERROR_CODE_t sendHeartbeat(int32_t heartbeatNodeID);




        /**@}*//************************************************************************/
        /********************************* GENERAL CAN *********************************/
        /********************************************************************************
         * @defgroup canfuncs  General CAN Functions
         * @brief Perform tasks required to configure.
        *@{*****************************************************************************/




        /********************************************************************************
         * @brief Parses any frames on the CAN bus and updates the local object dictionary accordingly.
         * 
         * @param message The frame received from the CAN bus.
         * @return EPOS_ERROR_CODE_t: 
         * If an EPOS4 or CAN SDO error was received, this will be the error type. 
        ********************************************************************************/
        ERROR_CODE_t receiver(const CAN_MESSAGE_t message);


        /********************************************************************************
         * @brief Convert an index and subindex into a valid EPOS_OD_t value.
         * @param testIndex Index (0xssiiii) value. \n 
         * 'ss' represent subindex byte, 'iiii' represent index bytes.
         * @param testSubindex if a subindex is not packed in the index, 
         * this value will be used.
         * @return EPOS_OD_t: 
         * A valid EPOS4 index entry. \n 
         * Equal to EPOS_OD_INVALID_ENTRY if no entry matches the given index.
        ********************************************************************************/
        EPOS_OD_t getIndexFromNoLength(int32_t testIndex, int32_t testSubindex = 0x00);


        /********************************************************************************
         * @brief Returns the number of milliseconds passed between now and 
         * the time the last heartbeat was received from the EPOS4.
         * 
         * @return uint32_t: 
         * The number of milliseconds since the last heartbeat was received.
        ********************************************************************************/
        uint32_t msSinceHeartbeat();

        
        /********************************************************************************
         * @brief Configures the period and Node-ID from which the EPOS4 will expect heartbeats. \n 
         * If heartbeats are not received in time, the EPOS4 will perform the actions specified by 
         * the abort connection option code and communication error behavior.
         * 
         * @param HBnodeID The node ID of the heartbeat producer.
         * @param HBperiodMS The expected period in milliseconds between heartbeats. \n 
         * It is recommended to set the consumer heartbeat time value at least 
         * 20 ms higher than the period of the producer to account for CAN bus latency jitter.
         * @param consumerNum The EPOS4 can consume two different heartbeats, choose
         * 1 or 2 to set the configuration for the corresponding consumer number.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t setHeartbeatConsumer(uint16_t HBnodeID, uint16_t HBperiodMS, uint16_t consumerNum = 1);




        /**@}*//************************************************************************/
        /************************************* SDO *************************************/
        /********************************************************************************
         * @defgroup sdofuncs  SDO Communication Functions
         * @brief SDO communications are used for configuration and access to individual data objects.
        *@{*****************************************************************************/




        /********************************************************************************
         * @brief Request to read EPOS4 Object Dictionary entry using SDO. \n 
         * It is usually best to use EPOS4::getODvalue() 
         * or EPOS4::getODpair() to retrieve a value from the EPOS4. \n 
         * To access the value after the request from the EPOS4, use the localOD functions:
         * 
         *      ERROR_CODE_t error = EPOS4.requestSDO(index, 1);
         *      int32_t value = EPOS4.localOD(index);
         * 
         * @param index Index of the Object Dictionary entry to request from the EPOS4.
         * @param waitForResponse If true, execution will block until a response 
         * is received from the EPOS4. \n 
         * If the response is not received within SDO_TIMEOUT_TICKS an error is returned. \n 
         * If the response is invalid (SDO Abort Error) an error is also returned. \n 
         * Default: 0 (non - blocking, fewer error warnings. Parse errors from the receiver if using)
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t requestSDO(EPOS_OD_t index, uint16_t waitForResponse = 0);


        /********************************************************************************
         * @brief Writes to the EPOS4 Object Dictionary.
         * 
         * @param index Index of the Object Dictionary entry to write to in the EPOS4.
         * @param value The value to be written to the corresponding object.
         * @param waitForResponse If true, execution will block until a response 
         * is received from the EPOS4. Default: 0 (non - blocking). \n 
         * If the response is not received within SDO_TIMEOUT_TICKS an error is returned. \n 
         * If the response is invalid (SDO Abort Error) an error is also returned.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t sendSDO(EPOS_OD_t index, int32_t value, uint16_t waitForResponse = 0);




        /**@}*//************************************************************************/
        /************************************* PDO *************************************/
        /********************************************************************************
         * @defgroup pdofuncs  PDO Setup & Communication Functions
         * @brief PDOs allow for faster, automatic, and synchronised communication
         * of pre-defined objects.
        *@{*****************************************************************************/

        /********************************************************************************
         * @defgroup PDOEnum PDO Setup & Communication Types
         * @brief Types used to simplify PDO setup and usage.
        ********************************************************************************/




        /********************************************************************************
         * @brief Set the number of PDOs mapped for all PDOs to zero. \n 
         * Should be used before PDOs are written,
         * as any pre-configured entries will be unable to be parsed by the Master.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t resetNumPDOMapped();


        /********************************************************************************
         * @brief Sends PDO mapping configurations to the EPOS4.
         * 
         * - The EPOS4 must be in pre-operational state for a PDO mapping to be accepted.
         * - Existing PDO entries should be cleared using EPOS4::resetNumPDOMapped() first,
         * as any pre-configured entries will be unable to be parsed by the Master.
         * 
         * @param Name The name to assign to the PDO, used when calling RX/TX functions:
         * - EPOS4::sendRxPDO()
         * - EPOS4::getTxPDO()
         * @param PDOConfig A PDO Map containing the configuration to send to the EPOS
         * @param COBID COB-ID for this PDO. Default 0: Automatic ID (PDO_TYPE_t + Node-ID).
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t configPDO(std::string Name, const PDO_MAPPING_t PDOConfig, uint32_t COBID = 0);


        /********************************************************************************
         * @brief Send data to the EPOS4 using an RxPDO (Master -> EPOS4)
         * 
         * @param PDOName The name assigned to the RX PDO being sent.
         * @param values A vector of values to be sent through using the RxPDO. \n 
         * They must be given in the same order as the indices 
         * were set in the PDO_MAPPING_t configuration.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t sendRxPDO(std::string PDOName, std::vector<int32_t> values);


        /********************************************************************************
         * @brief Request a TX PDO using a remote data frame (EPOS4 -> Master).
         * 
         * @param PDOName The name assigned to the TX PDO being requested.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t getTxPDO(std::string PDOName);
        



        /**@}*//************************************************************************/
        /******************************* MOTION CONTROL ********************************/
        /********************************************************************************
         * @defgroup motionfuncs  Motion Control Functions
         * @brief These functions control motor Torque, Velocity, and Position.
        *@{*****************************************************************************/

        /********************************************************************************
         * @defgroup motionEnum  Motion Control Types
         * @brief Types used for motion control.
        ********************************************************************************/




        /********************************************************************************
         * @brief Enables the power stage. \n 
         * Changes to the 'Operation Enabled' axis state. \n 
         * Torque will be applied to the motor to hold position.
         * 
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t enable();


        /********************************************************************************
         * @brief Disables the power stage. \n 
         * Changes to the 'Ready to Switch on' axis state. \n 
         * Torque will no longer be applied to hold motor position. \n
         * Does not reset faults or quick stops, 
         * does not power up from 'Switch on Disabled' state.
         * 
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t disable();


        /********************************************************************************
         * @brief Checks if EPOS4 is in the Operation Enabled axis state.
         * 
         * @return char 
         * - True: Enabled
         * - False: Disabled
        ********************************************************************************/
        char isEnabled(){return AXIS_STATE_OPERATION_ENABLED == getAxisState();};


        /********************************************************************************
         * @brief Changes the EPOS4's mode of operation. \n 
         * Available Modes: 
         * - Profile Position Mode (PPM), Drive follows a trajectory to a target position
         *   + EPOS4::moveToTargetPosition()
         * - Profile Velocity Mode (PVM), Drive follows a trajectory to reach a target velocity
         *   + EPOS4::halt()
         *   + EPOS4::moveToTargetVelocity()
         * - Homing Mode (HMM), For various methods to find the home position.
         *   + HOMING_METHOD_t
         * 
         * Cyclic Synchronous modes are available but do not have helper functions: 
         * - Position Mode (CSP)
         * - Velocity Mode (CSV)
         * - Torque Mode (CST)
         * 
         * @param mode The desired mode
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t setModeOfOperation(EPOS_OPERATION_MODE_t mode);


        /********************************************************************************
         * @brief Sets the new Target Position and moves the motor.
         * 
         * @param position The target position, in encoder counts.
         * @param wantRelative If the target position is absolute or relative.
         * - False: Absolute, The motor will move until
         * the Position Actual Value matches the given position.
         * - True: Relative, The motor will move until
         * the Position Actual Value has changed by the target amount.
         * @param waitForTarget If the function should block execution 
         * until the motion is completed. 
         * - True: Wait.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t moveToTargetPosition(int32_t position, bool wantRelative, bool waitForTarget);
        
        
        /********************************************************************************
         * @brief Sets new Target Velocity and moves the motor.
         * 
         * @param velocity The desired speed, in rpm. Speed before gearing.
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t moveToTargetVelocity(int32_t velocity);


        /********************************************************************************
         * @brief Command the motor to halt motion. \n 
         * Sets the halt bit of the ControlWord to true. 
         * 
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t halt();




        /**@}*//************************************************************************/
        /**************************** Status & Mode Control ****************************/
        /********************************************************************************
         * @defgroup statushelps  Status Helper Functions
         * @brief These functions assist in determining and changing the state of the drive.
        *@{*****************************************************************************/

        /********************************************************************************
         * @defgroup statusEnum Status Helper Types
         * @brief Types defining Errors, Drive Axis States, and CANopen NMT Services.
        ********************************************************************************/

       


        /********************************************************************************
         * @brief Attempt to clear any errors on the EPOS4. \n 
         * This is done by toggling the ControlWord's CW_BITS_FAULT_RESET bit.
         * 
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t clearError();


        /********************************************************************************
         * @brief Determines the fault reaction a particular Error Code causes.
         * @param error The error code to parse.
         * @return uint8_t: Byte indicating the reaction, in the format:
         * 
         *      0b_DFAXWSM
         * 
         * - bit 0: Master Error (M)
         * - bit 1: SDO Error (S)
         * - bit 2: Warning (no effect on device status) (W)
         * - bit 3: Position Clear (position value will be cleared on error reset) (X)
         * - bit 4: Abort connection reaction performed (A)
         * - bit 5: Fault reaction performed (F)
         * - bit 6: Secure movement no longer possible (D)
         * - bit 7: Reserved
         * 
         * If = 0; Then there is No Error.
        ********************************************************************************/
        static uint8_t parseError(ERROR_CODE_t error);


        /********************************************************************************
         * @brief Returns a modified copy of the local ControlWord with the selected bits modified.
         * 
         * @param bits Vector of CW_BITS_t to change 
         * @param values Vector of values (0 or 1) corresponding to the selected bits
         * @return uint16_t: The modified ControlWord. \n 
         * This should be sent to the EPOS4 using EPOS4::sendSDO() or EPOS4::sendRxPDO().
        ********************************************************************************/
        uint16_t setControlWordBits(std::vector<CW_BITS_t> bits, std::vector<uint16_t> values);


        /********************************************************************************
         * @brief Extract a particular bit from the local StatusWord object. \n 
         * The StatusWord is not retrieved from the EPOS4 in this function,
         * It should be either configured in an asynchronous TxPDO mapping 
         * or retrieved via SDO before being used.
         * 
         *      EPOS4.requestSDO(EPOS_OD_STATUSWORD, 1);
         *      EPOS4.getBitFromStatusWord(SW_BITS_t bit);
         * 
         * @param bit StatusWord bit to be extracted
         * @return uint16_t: 1 or 0 representing the selected bit
        ********************************************************************************/
        int16_t getBitFromStatusWord(SW_BITS_t bit){return (localOD(EPOS_OD_STATUSWORD) >> bit) & 1;};


        /********************************************************************************
         * @brief Extract a particular bit from the local ErrorRegister object. \n 
         * Note that the error register is automatically updated by CAN emergency frames.
         * 
         * @param bit ErrorRegister bit to be extracted
         * @return uint16_t: 1 or 0 representing the selected bit
        ********************************************************************************/
        int16_t getBitFromErrorRegister(ER_BITS_t bit){return (localOD(EPOS_OD_ERROR_REGISTER) >> bit) & 1;};
        

        /********************************************************************************
         * @brief Decodes the Axis State from the Status Word. \n 
         * See EPOS4 Firmware Specification 2.2, Device Control for information on Axis States.
         *
         * @param StatusWord If the StatusWord is not passed to the function, 
         * the up to date value will be requested from the EPOS4 using EPOS4::getOD().
         * @return EPOS_AXIS_STATE_t: The current Axis state
        ********************************************************************************/
        EPOS_AXIS_STATE_t getAxisState(int32_t StatusWord = -1);


        /********************************************************************************
         * @brief Sends a Device Control Command to change the state of the drive. \n 
         * See EPOS4 Firmware Specification 2.2, Device Control for information on Axis States.
         * 
         * @param command The axis control command to send to the EPOS
         * @return ERROR_CODE_t: ERROR_CODE_NOERROR when successful.
        ********************************************************************************/
        ERROR_CODE_t sendAxisCommand(EPOS_AXIS_COMMAND_t command);


        
        /**@}*//************************************************************************/
};




#ifdef __cplusplus
}
#endif